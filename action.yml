name: 'StackQL Studios - StackQL Assert'
description: 'run StackQL query to test and audit your infrastructure.'
author: 'Yuncheng Yang, StackQL Studios'
inputs:
  test_query:
    description:  stackql query to execute (need to supply either test_query or test_query_file_path)
    required: false
  test_query_file_path:
    description: stackql query file to execute (need to supply either test_query or test_query_file_path)
    required: false
  data_file_path:
    description: path to data file to pass to the stackql query preprocessor (json or jsonnet file)
    required: false
  vars:
    description: comma delimited list of variables to pass to the stackql query preprocessor (supported with jsonnet config blocks or jsonnet data files only), accepts 'var1=val1,var2=val2', can be used to source environment variables into stackql queries 
    required: false
  expected_rows: 
    description: expected number of rows from executing test query
    required: false
  expected_results_str:
    description: expected result (as a json string) from executing test query, overrides expected_results_file_path
    required: false
  expected_results_file_path:
    description: json file with the expected result
    required: false
  auth_obj_path:
    description: the path of json file that stores stackql AUTH string (only required when using non-standard environment variable names)
    required: false
  auth_str:
    description: stackql AUTH string (only required when using non-standard environment variable names)
    required: false

runs:
  using: "composite"
  steps:
    - name: check if stackql is installed and set output
      id: check-stackql
      shell: bash
      run: |
        if command -v stackql &> /dev/null; then
            echo "stackql_installed=true" >> $GITHUB_OUTPUT
        else
            echo "stackql_installed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: setup stackql
      uses: stackql/setup-stackql@v1.2.0
      if: ${{steps.check-stackql.outputs.stackql_installed == 'false'}}
      with:
        use_wrapper: true

    - name: setup auth
      if: (inputs.auth_obj_path != '') || (inputs.auth_str != '')
      id: setup-auth
      uses: actions/github-script@v6
      with:
        script: |
          const path = require('path');
          const utilsPath = path.join(process.env.GITHUB_ACTION_PATH, 'lib', 'utils.js')
          const {setupAuth} = require(utilsPath)
          setupAuth(core)
      env:
        AUTH_FILE_PATH: ${{ inputs.auth_obj_path }}
        AUTH_STR: ${{inputs.auth_str}}

    - name: get stackql command
      uses: actions/github-script@v6
      with:
        script: |
          const path = require('path');
          const utilsPath = path.join(process.env.GITHUB_ACTION_PATH, 'lib', 'utils.js')
          const {getStackqlCommand} = require(utilsPath)
          getStackqlCommand(core)
      env:
        QUERY_FILE_PATH: ${{ inputs.test_query_file_path }}
        QUERY: ${{inputs.test_query}}
        DATA_FILE_PATH: ${{inputs.data_file_path}}
        VARS: ${{inputs.vars}}
        OUTPUT: 'json'

    - name: dryrun stackql command
      id: dryrun-query
      shell: bash
      run: |
        ${{ env.STACKQL_DRYRUN_COMMAND }}

    - name: show rendered stackql query
      uses: actions/github-script@v6
      with:
        script: |
          const path = require('path');
          const utilsPath = path.join(process.env.GITHUB_ACTION_PATH, 'lib', 'utils.js')
          const {showStackQLQuery} = require(utilsPath)
          showStackQLQuery(core)        
      env:
        # DRYRUN_RESULT: ${{steps.dryrun-query.outputs.stdout}}
        DRYRUN_RESULT: ${{steps}}

    - name: execute stackql command
      id: exec-query
      shell: bash
      run: |
        ${{ env.STACKQL_COMMAND }}
    
    - name: Check results
      uses: actions/github-script@v6
      with:
        script: |
          const path = require('path');
          const assertPath = path.join(process.env.GITHUB_ACTION_PATH, 'stackql-assert.js')
          const {assertResult} = require(assertPath)
          assertResult(core)
      env:
        RESULT: ${{steps.exec-query.outputs.stdout}}
        EXPECTED_RESULTS_STR: ${{ inputs.expected_results_str }}
        EXPECTED_RESULTS_FILE_PATH: ${{inputs.expected_results_file_path}}
        EXPECTED_ROWS: ${{inputs.expected_rows}}
      
branding:
  icon: 'terminal'
  color: 'green'